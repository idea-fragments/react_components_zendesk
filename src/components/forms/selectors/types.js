// @flow

import type { Validation }     from "components/forms/Validation.type"
import type { ContainerProps } from "styles/types"
import * as React              from "react"

export type SelectorItemKey = ?string | ?number
export type SelectorOption = { [string] :any }
export type OnMultiSelectItemRemoveFunc<T = SelectorItemKey> = (T) => void
export type OnItemSelectedFunc<T = SelectorItemKey | SelectorOption> = (T) => void

type Common = {
    disabled? :boolean,
    label? :string,
    options :Array<SelectorOption>,
    optionsKeyMap? :{ [SelectorItemKey] :SelectorOption },
    keyField :string,
    valueField :string,
    message? :?string | null,
    emptyState? :string,
    hint? :string | React.Element,
    onChange? :OnItemSelectedFunc<>,
    onStateChange? :(state) => void,
    invalidOnNoSelection? :boolean,
    validation :Validation,
    flat? :boolean,
    open? :boolean,
    small? :boolean,
} & ContainerProps

export type SelectorProps = {
    selectedKey? :SelectorItemKey,
    onChange? :OnItemSelectedFunc<>,
} & Common

export type MultiSelectorProps = {
    selectedKeys? :SelectorItemKey[],
    onChange? :OnItemSelectedFunc<SelectorItemKey[] | SelectorOption[]>,
} & Common

export type RefinedSelectorProps = {
    // should be generated by HOC automatically
    optionNodes :Array<React.Node>
} & SelectorProps

export type RefinedMultiSelectorProps = {
    // should be generated by HOC automatically
    optionNodes :Array<React.Node>
} & MultiSelectorProps
